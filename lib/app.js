// Generated by CoffeeScript 1.6.3
/*
Module dependencies.
*/


(function() {
  var FacebookStrategy, LastFmNode, LocalStrategy, User, app, express, findById, findByUsername, flash, getRelatedArtists, http, lastfm, mongoose, passport, path;

  findById = function(id, fn) {
    var idx;
    idx = id - 1;
    if (users[idx]) {
      return fn(null, users[idx]);
    } else {
      return fn(new Error("User " + id + " does not exist"));
    }
  };

  findByUsername = function(username, fn) {
    var i, len, user;
    i = 0;
    len = users.length;
    while (i < len) {
      user = users[i];
      if (user.username === username) {
        return fn(null, user);
      }
      i++;
    }
    return fn(null, null);
  };

  express = require("express");

  http = require("http");

  path = require("path");

  flash = require("connect-flash");

  app = express();

  passport = require("passport");

  FacebookStrategy = require("passport-facebook").Strategy;

  LocalStrategy = require("passport-local").Strategy;

  LastFmNode = require("lastfm").LastFmNode;

  lastfm = new LastFmNode({
    api_key: "1805293d5e058d03761b53547ec0ad74",
    secret: "ff65671f88c114e3752236f465566c67"
  });

  mongoose = require('mongoose');

  app.set("port", process.env.PORT || 3000);

  app.set("views", __dirname + "/../views");

  app.set("view engine", "jade");

  app.use(express.favicon());

  app.use(express.logger("dev"));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.cookieParser("your secret here"));

  app.use(express.session());

  app.use(passport.initialize());

  app.use(passport.session());

  app.use(app.router);

  app.use(require("stylus").middleware(__dirname + "/../public"));

  app.use(express["static"](path.join(__dirname, "/../public")));

  mongoose.connect('mongodb://localhost');

  User = mongoose.model('User', {
    name: {
      type: String,
      required: true,
      unique: true
    },
    email: {
      type: String,
      required: true,
      unique: true
    },
    password: {
      type: String,
      required: true
    }
  });

  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {
    return findById(id, function(err, user) {
      return done(err, user);
    });
  });

  passport.use(new LocalStrategy(function(username, password, done) {
    return process.nextTick(function() {
      return findByUsername(username, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: "Unknown user " + username
          });
        }
        if (user.password !== password) {
          return done(null, false, {
            message: "Invalid password"
          });
        }
        return done(null, user);
      });
    });
  }));

  if ("development" === app.get("env")) {
    app.use(express.errorHandler());
  }

  app.configure(function() {
    app.use(express.cookieParser("keyboard cat"));
    app.use(express.session({
      cookie: {
        maxAge: 60000
      }
    }));
    return app.use(flash());
  });

  app.get("/", function(req, res) {
    return res.render("intro");
  });

  http.createServer(app).listen(app.get("port"), function() {
    return console.log("Express server listening on port " + app.get("port"));
  });

  app.post("/signin", function(req, res) {
    var newUser;
    newUser = User({
      name: req.body.upUsername,
      email: req.body.upEmail,
      password: req.body.upPassword
    });
    newUser.save(function(err) {
      if (err) {
        return res.send(err);
      } else {
        return User.find({
          name: req.body.upUsername
        }, function(err, currentUser) {
          res.render('index', {
            currentUser: currentUser
          });
        });
      }
    });
  });

  passport.use(new FacebookStrategy({
    clientID: 439594016145506,
    clientSecret: "ad6298f9c42943e2775163bd4f64d589",
    callbackURL: "http://dynammix.herokuapp.com/auth/facebook/callback"
  }, function(accessToken, refreshToken, profile, done) {
    return User.findOrCreate({
      id: id,
      name: name
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      return done(null, user);
    });
  }));

  app.get("/auth/facebook", passport.authenticate("facebook"));

  app.get("/auth/facebook/callback", function(req, res) {
    return passport.authenticate("facebook", {
      successRedirect: res.redirect('/'),
      failureRedirect: res.redirect("/login")
    });
  });

  app.post("/login", passport.authenticate("local", {
    successRedirect: "/",
    failureRedirect: "/login"
  }));

  getRelatedArtists = function(getArtist) {
    var artist, relatedArtists, request;
    relatedArtists = {};
    artist = void 0;
    request = lastfm.request("artist.getInfo", {
      artist: getArtist,
      handlers: {
        success: function(data) {
          var i;
          artist = data.artist.name;
          i = 0;
          while (i < data.artist.similar.artist.length) {
            relatedArtists[data.artist.similar.artist[i].name] = data.artist.similar.artist[i].image[3]["#text"];
            i++;
          }
          return relatedArtists;
        },
        error: function(error) {
          return console.log("Error: " + error.message);
        }
      }
    });
    return relatedArtists;
  };

  app.post("/related", function(req, res) {
    var relArtist;
    relArtist = getRelatedArtists(req.body.artistSearch);
    return setTimeout((function() {
      return res.send({
        title: "DynamMix",
        artist: req.body.artistSearch,
        relatedArtists: relArtist
      });
    }), 1000);
  });

  app.get("/related", function(req, res) {
    return res.render("index", {
      artist: req.query.artistSearch
    });
  });

}).call(this);
